{"version":3,"sources":["utils/constants.js","utils/routers.js","views/Header/Header.jsx","store/settings/types.js","store/settings/reducers/setSettings.js","store/settings/reducers/favorite.js","store/settings/reducers/index.js","store/settings/actions.js","store/settings/index.js","views/Header/HeaderContainer.js","views/Loading/index.js","utils/weather.js","views/Landing/Forecasts.jsx","utils/dates.js","utils/functions.js","views/Landing/SearchLocation.jsx","views/Landing/Landing.jsx","store/weather/types.js","store/weather/reducers/getWeather.js","store/weather/reducers/forecasts.js","store/weather/reducers/favorites.js","store/weather/reducers/index.js","store/weather/actions.js","utils/NetworkError.js","utils/httpFetch.js","apis/weather.js","utils/location.js","store/weather/sagas.js","store/weather/index.js","store/location/types.js","store/location/reducers/searchLocation.js","store/location/reducers/index.js","store/location/actions.js","store/location/sagas.js","store/location/index.js","views/Landing/LandingContainer.js","utils/selector.js","views/Favorites/Favorite.jsx","views/Favorites/Favorites.jsx","views/Favorites/FavoritesContainer.js","views/App/App.js","serviceWorker.js","store/sagas.js","store/reducers.js","store/initialState.js","store/store.js","index.js"],"names":["WEATHER_API_KEY","process","WEATHER_URL","IS_DEV","TemperatureUnit","metric","imperial","ThemeStyle","light","dark","LANDING","LOCATION","FAVORITES","Header","props","location","style","unit","setTheme","setTemparatureUnit","useState","showSettings","setShowSettings","settings","onClick","className","classnames","Item","key","Group","value","onChange","target","Button","Divider","mode","selectedKeys","pathname","routers","to","overlay","placement","onVisibleChange","visible","type","state","action","types","window","localStorage","setItem","temperatureUnit","themeStyle","newFavorites","favorites","data","JSON","stringify","filter","favorite","Key","keyId","initialState","getItem","parse","reducer","setSettings","HeaderConnected","connect","dispatch","settingsActions","withRouter","Loading","size","getWeatherIcon","iconId","slice","partOfDays","Forecasts","dailyForecasts","map","dayInfo","date","Date","EpochDate","getDay","getWeekName","getDate","getMonth","getMonthName","substring","partOfDay","src","Icon","alt","IconPhrase","Temperature","Minimum","Value","Unit","Maximum","debounce","fn","time","timeout","functionCall","apply","arguments","clearTimeout","setTimeout","onlyLatin","SearchLocation","handlerSearchChange","setState","searchCity","replace","handlerSearchCity","onSearch","handlerSelectCity","onSelected","renderAutoCompleteList","isLoading","Option","disabled","length","item","LocalizedName","AdministrativeArea","Country","this","dropdownMatchSelectWidth","dropdownStyle","width","dataSource","placeholder","optionLabelProp","onSelect","suffix","Component","LandingPage","handlerFavorite","currentLocation","addToFavorite","removeFromFavorite","isFavorite","handlerSearchLocation","searchLocation","cleanupSearchLocation","handlerSelectedLocation","locationKey","autocomplete","getWeather","find","isChangedTemparatureUnit","getCurrentLocationWeather","locationId","match","params","prevProps","weatherGetState","error","forecastsGetState","Modal","title","content","inProgress","getForecastsWeather","lastUpdate","currentWeather","forecasts","autocompleteState","theme","WeatherIcon","WeatherText","Headline","Text","DailyForecasts","weather","now","isSilent","getForecasts","response","getFavorites","isMetric","NetworkError","body","status","statusText","url","Error","captureStackTrace","api","get","endpoint","Promise","resolve","fetch","cache","then","res","ok","json","LOCATION_URL","LOCATION_AUTOCOMPLITED_URL","LOCATION_GEOPOSITION_SEARCH_URL","CURRENT_CONDITIONS_URL","FORECASTS_URL","getLocationAutocomplete","search","getCurrentConditions","getForecasts5Days","getCurrentLocationKey","reject","navigator","geolocation","getCurrentPosition","position","coords","lat","Math","round","latitude","lon","longitude","apis","catch","info","getLocationWeatherSaga","getLocationWeather","put","weatherActions","call","weatherAPI","getCurrentLocationWeatherSaga","watchCurrentWeather","takeEvery","weatherTypes","watchLocationWeather","getCurrentForecastsWeatherSaga","getCurrentForecastsWeather","watchCurrentForecastsWeather","getFavoriteLocationWeatherSaga","getFavoriteLocationWeather","watchFavoriteLocationWeather","getSearchLocation","serachLocation","text","getSearchLocationSaga","watchSearchLocation","LandingConnected","undefined","locationActions","Landing","Favorite","weatherState","hasOwnProperty","onRemove","FavoritePage","getFavoriteWeather","favoritesWeather","favoritesWeatherState","history","push","ConnectedFavoritesComponent","FavoritesComponent","App","handlerOfStyle","document","classList","add","remove","Content","exact","path","component","FavoritesPage","render","Boolean","hostname","weatherSagas","locationSagas","combineReducers","weatherReducers","settingsReducers","locationReducers","sagaMiddleware","createSagaMiddleware","store","defaultInitialState","middleware","enhancers","composeEnhancers","compose","createReduxStore","rootReducer","applyMiddleware","sagas","forEach","run","createStore","dotenv","config","ReactDOM","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1b7dca46.chunk.js","sourcesContent":["// Env constants\nexport const WEATHER_API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\nexport const WEATHER_URL = process.env.REACT_APP_WEATHER_URL;\nexport const IS_DEV = process.env.NODE_ENV === 'development';\n\n// Application constants\nexport const TemperatureUnit = {\n  metric: 'Metric',\n  imperial: 'Imperial',\n};\n\nexport const ThemeStyle = {\n  light: 'Light',\n  dark: 'Dark',\n};\n","export const LANDING = '/';\nexport const LOCATION = '/location';\nexport const FAVORITES = '/favorites';\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Menu, Icon, Radio, Dropdown } from 'antd';\nimport classnames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nimport { TemperatureUnit, ThemeStyle } from '../../utils/constants';\nimport * as routers from '../../utils/routers';\n\nimport './style.scss';\n\nfunction Header(props) {\n  const { location, style, unit, setTheme, setTemparatureUnit } = props;\n  const [showSettings, setShowSettings] = useState(false);\n\n  const settings = (\n    <Menu\n      onClick={() => {}}\n      className={classnames('settings-menu', {\n        dark: style === ThemeStyle.dark,\n      })}\n    >\n      <Menu.Item key=\"theme\">\n        <div className=\"settings-name\">Theme:</div>\n        <Radio.Group\n          value={style}\n          onChange={({ target }) => setTheme(target.value)}\n        >\n          <Radio.Button value={ThemeStyle.light}>Light</Radio.Button>\n          <Radio.Button value={ThemeStyle.dark}>Dark</Radio.Button>\n        </Radio.Group>\n      </Menu.Item>\n      <Menu.Divider />\n      <Menu.Item key=\"unit\">\n        <div className=\"settings-name\">Temperature:</div>\n        <Radio.Group\n          value={unit}\n          onChange={({ target }) => setTemparatureUnit(target.value)}\n        >\n          <Radio.Button value={TemperatureUnit.metric}>°C</Radio.Button>\n          <Radio.Button value={TemperatureUnit.imperial}>°F</Radio.Button>\n        </Radio.Group>\n      </Menu.Item>\n    </Menu>\n  );\n  return (\n    <div className=\"header-content\">\n      <div className=\"header-part\">\n        <div className=\"header-brand\">\n          <h2>Weather</h2>\n        </div>\n      </div>\n      <div className=\"header-part\">\n        <Menu\n          mode=\"horizontal\"\n          selectedKeys={[location.pathname]}\n          className=\"header-menu\"\n        >\n          <Menu.Item key={routers.LANDING}>\n            <NavLink to={routers.LANDING}>Home</NavLink>\n          </Menu.Item>\n          <Menu.Item key={routers.FAVORITES}>\n            <NavLink to={routers.FAVORITES}>Favorites</NavLink>\n          </Menu.Item>\n        </Menu>\n        <Dropdown\n          className=\"header-settings\"\n          overlay={settings}\n          placement=\"bottomRight\"\n          onVisibleChange={visible => setShowSettings(visible)}\n          visible={showSettings}\n        >\n          <Icon type=\"setting\" />\n        </Dropdown>\n      </div>\n    </div>\n  );\n}\n\nHeader.propTypes = {\n  unit: PropTypes.string.isRequired,\n  style: PropTypes.string.isRequired,\n\n  setTemparatureUnit: PropTypes.func.isRequired,\n  setTheme: PropTypes.func.isRequired,\n};\n\nexport default Header;\n","const SET_TEMPERATURE_UNIT = 'app/settings/SET_TEMPERATURE_UNIT';\nconst SET_THEME_STYLE = 'app/settings/SET_THEME_STYLE';\n\nconst ADD_FAVORITE = 'app/settings/ADD_FAVORITE';\nconst REMOVE_FAVORITE = 'app/settings/REMOVE_FAVORITE';\n\nexport default {\n  SET_TEMPERATURE_UNIT,\n  SET_THEME_STYLE,\n\n  ADD_FAVORITE,\n  REMOVE_FAVORITE,\n};\n","import types from '../types';\n\nexport default function(state, action) {\n  // eslint-disable-next-line default-case\n  switch (action.type) {\n    case types.SET_TEMPERATURE_UNIT:\n      window.localStorage.setItem('temperatureUnit', action.unit);\n      return {\n        ...state,\n        temperatureUnit: action.unit,\n      };\n    case types.SET_THEME_STYLE:\n      window.localStorage.setItem('themeStyle', action.style);\n      return {\n        ...state,\n        themeStyle: action.style,\n      };\n  }\n}\n","import types from '../types';\n\nexport default function(state, action) {\n  // eslint-disable-next-line default-case\n  switch (action.type) {\n    case types.ADD_FAVORITE: {\n      const newFavorites = [...state.favorites, action.data];\n      window.localStorage.setItem('favorites', JSON.stringify(newFavorites));\n      return {\n        ...state,\n        favorites: newFavorites,\n      };\n    }\n    case types.REMOVE_FAVORITE: {\n      const newFavorites = state.favorites.filter(\n        favorite => favorite.Key !== action.keyId,\n      );\n      window.localStorage.setItem('favorites', JSON.stringify(newFavorites));\n      return {\n        ...state,\n        favorites: newFavorites,\n      };\n    }\n  }\n}\n","import setSettings from './setSettings';\nimport favorite from './favorite';\n\nimport { TemperatureUnit, ThemeStyle } from '../../../utils/constants';\n\nfunction getFavorite() {\n  return window.localStorage.getItem('favorites')\n    ? JSON.parse(window.localStorage.getItem('favorites'))\n    : [];\n}\n\nconst initialState = {\n  temperatureUnit:\n    window.localStorage.getItem('temperatureUnit') || TemperatureUnit.metric,\n  themeStyle: window.localStorage.getItem('themeStyle') || ThemeStyle.light,\n  favorites: getFavorite(),\n};\n\nexport default function(state = initialState, action) {\n  return setSettings(state, action) || favorite(state, action) || state;\n}\n","import types from './types';\n\nconst setTemparatureUnit = unit => ({\n  type: types.SET_TEMPERATURE_UNIT,\n  unit,\n});\n\nconst setThemeStyle = style => ({\n  type: types.SET_THEME_STYLE,\n  style,\n});\n\nconst addToFavotite = data => ({\n  type: types.ADD_FAVORITE,\n  data,\n});\n\nconst removeFromFavotite = keyId => ({\n  type: types.REMOVE_FAVORITE,\n  keyId,\n});\n\nexport default {\n  setTemparatureUnit,\n  setThemeStyle,\n\n  addToFavotite,\n  removeFromFavotite,\n};\n","import reducer from './reducers';\n\nexport { default as settingsActions } from './actions';\n\nexport default reducer;\n","import { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\n\nimport Header from './Header';\nimport { settingsActions } from '../../store/settings';\n\nconst mapStateToProps = state => {\n  return {\n    unit: state.settings.temperatureUnit,\n    style: state.settings.themeStyle,\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  setTemparatureUnit: unit =>\n    dispatch(settingsActions.setTemparatureUnit(unit)),\n  setTheme: style => dispatch(settingsActions.setThemeStyle(style)),\n});\n\nconst HeaderConnected = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Header);\n\nexport default withRouter(HeaderConnected);\n","import React from 'react';\nimport { Spin } from 'antd';\n\nimport './style.scss';\n\nfunction Loading() {\n  return (\n    <div className=\"loading-container\">\n      <Spin size=\"large\" />\n    </div>\n  );\n}\n\nexport default Loading;\n","export function getWeatherIcon(iconId) {\n  return `https://developer.accuweather.com/sites/default/files/${(\n    '0' + iconId\n  ).slice(-2)}-s.png`;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getWeekName, getMonthName } from '../../utils/dates';\nimport { getWeatherIcon } from '../../utils/weather';\n\nimport './Forecasts.scss';\n\nconst partOfDays = ['Day', 'Night'];\n\nfunction Forecasts({ dailyForecasts, temperatureUnit }) {\n  return (\n    <div className=\"forecasts\">\n      {dailyForecasts.map(dayInfo => {\n        const date = new Date(dayInfo.Date);\n        return (\n          <div key={dayInfo.EpochDate} className=\"forecast\">\n            <div className=\"__week-name\">{getWeekName(date)}</div>\n            <div className=\"__week-day\">\n              {`${date.getDate()} ${getMonthName(date).substring(0, 3)}`}\n            </div>\n            <div className=\"__weather-of-day\">\n              {partOfDays.map(partOfDay => {\n                return (\n                  <div key={partOfDay} className=\"__part-of-time\">\n                    <div>{`${partOfDay}:`}</div>\n                    <div className=\"__weather-icon\">\n                      <img\n                        src={getWeatherIcon(dayInfo[partOfDay].Icon)}\n                        alt={dayInfo[partOfDay].IconPhrase}\n                      />\n                      <div>{dayInfo[partOfDay].IconPhrase}</div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n\n            <div className=\"__weather-temparature\">\n              <div className=\"__temparature\">\n                {'Min: '}\n                <span>\n                  {`${dayInfo.Temperature.Minimum.Value} °${dayInfo.Temperature.Minimum.Unit}`}\n                </span>\n              </div>\n              <div className=\"__temparature\">\n                {'Max: '}\n                <span>\n                  {`${dayInfo.Temperature.Maximum.Value} °${dayInfo.Temperature.Maximum.Unit}`}\n                </span>\n              </div>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nForecasts.propTypes = {\n  dailyForecasts: PropTypes.array.isRequired,\n  temperatureUnit: PropTypes.string.isRequired,\n};\n\nexport default Forecasts;\n","export function getWeekName(date) {\n  const weekTitle = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  return weekTitle[date.getDay()];\n}\n\nexport function getMonthName(date) {\n  const monthNames = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ];\n  return monthNames[date.getMonth()];\n}\n","export const debounce = (fn, time) => {\n  let timeout;\n\n  return function() {\n    const functionCall = () => fn.apply(this, arguments);\n\n    clearTimeout(timeout);\n    timeout = setTimeout(functionCall, time);\n  };\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { AutoComplete, Input, Icon } from 'antd';\nimport { debounce } from '../../utils/functions';\nimport Loading from '../Loading';\n\nconst onlyLatin = /[^A-Za-z\\s]/gi;\n\nclass SearchLocation extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchCity: '',\n    };\n\n    this.handlerSearchCity = debounce(this.handlerSearchCity, 500);\n  }\n\n  handlerSearchChange = value => {\n    this.setState({ searchCity: value.replace(onlyLatin, '') });\n  };\n\n  handlerSearchCity = value => {\n    this.props.onSearch(value.replace(onlyLatin, ''));\n  };\n\n  handlerSelectCity = value => {\n    const key = value !== 'empty' ? value : '';\n    this.setState({ searchCity: '' });\n    this.props.onSelected(key);\n  };\n\n  renderAutoCompleteList = () => {\n    const { data, isLoading } = this.props;\n    const { searchCity } = this.state;\n    if (searchCity === '') {\n      return [];\n    }\n\n    if (isLoading) {\n      return [\n        <AutoComplete.Option disabled={true} key=\"empty\">\n          <Loading />\n        </AutoComplete.Option>,\n      ];\n    }\n\n    if (data.length) {\n      return data.map(item => (\n        <AutoComplete.Option key={item.Key}>\n          {`${item.LocalizedName} (${item.AdministrativeArea.LocalizedName}, ${item.Country.LocalizedName})`}\n        </AutoComplete.Option>\n      ));\n    }\n    return [\n      <AutoComplete.Option disabled={true} key=\"empty\">\n        Not Found\n      </AutoComplete.Option>,\n    ];\n  };\n\n  render() {\n    const { searchCity } = this.state;\n    return (\n      <div className=\"search-container\">\n        <AutoComplete\n          className=\"search\"\n          dropdownMatchSelectWidth={false}\n          dropdownStyle={{ width: 300 }}\n          dataSource={this.renderAutoCompleteList()}\n          placeholder=\"Enter city\"\n          optionLabelProp=\"text\"\n          onSelect={this.handlerSelectCity}\n          onSearch={this.handlerSearchCity}\n          onChange={this.handlerSearchChange}\n          value={searchCity}\n        >\n          <Input suffix={<Icon type=\"search\" />} />\n        </AutoComplete>\n      </div>\n    );\n  }\n}\n\nSearchLocation.propTypes = {\n  onSearch: PropTypes.func.isRequired,\n  onSelected: PropTypes.func.isRequired,\n\n  data: PropTypes.array.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n};\n\nexport default SearchLocation;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon, Modal } from 'antd';\n\nimport Loading from '../Loading';\nimport Forecasts from './Forecasts';\nimport SearchLocation from './SearchLocation';\nimport { getWeatherIcon } from '../../utils/weather';\nimport { TemperatureUnit } from '../../utils/constants';\nimport * as routers from '../../utils/routers';\n\nimport './styles.scss';\n\nclass LandingPage extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isChangedTemparatureUnit: false,\n    };\n  }\n\n  componentDidMount() {\n    const {\n      getCurrentLocationWeather,\n      getWeather,\n      match: { params: locationId },\n      location: { state },\n    } = this.props;\n    if (locationId && state) {\n      getWeather(state.location);\n    } else {\n      getCurrentLocationWeather();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      this.props.weatherGetState.error ||\n      this.props.forecastsGetState.error\n    ) {\n      Modal.error({\n        title: 'Failed to get weather',\n        content: 'Please refresh page or try later.',\n      });\n      return;\n    }\n\n    if (\n      prevProps.weatherGetState.inProgress &&\n      !this.props.weatherGetState.inProgress\n    ) {\n      const { getForecastsWeather, currentLocation } = this.props;\n      getForecastsWeather(\n        currentLocation.Key,\n        this.props.temperatureUnit === TemperatureUnit.metric,\n      );\n      return;\n    }\n\n    if (this.props.temperatureUnit !== prevProps.temperatureUnit) {\n      const { getForecastsWeather, currentLocation } = this.props;\n      this.setState({\n        isChangedTemparatureUnit: true,\n      });\n      getForecastsWeather(\n        currentLocation.Key,\n        this.props.temperatureUnit === TemperatureUnit.metric,\n        true,\n      );\n    }\n\n    if (\n      prevProps.location.pathname !== this.props.location.pathname &&\n      this.props.location.pathname === routers.LANDING\n    ) {\n      this.props.getCurrentLocationWeather();\n    }\n\n    if (\n      this.state.isChangedTemparatureUnit &&\n      prevProps.forecastsGetState.inProgress &&\n      !this.props.forecastsGetState.inProgress\n    ) {\n      this.setState({\n        isChangedTemparatureUnit: false,\n      });\n    }\n  }\n\n  handlerFavorite = () => {\n    const {\n      currentLocation,\n      addToFavorite,\n      removeFromFavorite,\n      isFavorite,\n    } = this.props;\n    isFavorite\n      ? removeFromFavorite(currentLocation.Key)\n      : addToFavorite(currentLocation);\n  };\n\n  handlerSearchLocation = value => {\n    const { searchLocation, cleanupSearchLocation } = this.props;\n    if (value) {\n      searchLocation(value);\n      return;\n    }\n    cleanupSearchLocation();\n  };\n\n  handlerSelectedLocation = locationKey => {\n    const { autocomplete, getWeather } = this.props;\n    const location = autocomplete.find(item => item.Key === locationKey);\n    if (location) {\n      getWeather(location);\n    }\n  };\n\n  render() {\n    const { weatherGetState, forecastsGetState } = this.props;\n    const { isChangedTemparatureUnit } = this.state;\n\n    if (\n      !isChangedTemparatureUnit &&\n      (!weatherGetState.lastUpdate ||\n        weatherGetState.inProgress ||\n        !forecastsGetState.lastUpdate ||\n        forecastsGetState.inProgress)\n    ) {\n      return <Loading />;\n    }\n\n    if (weatherGetState.error || forecastsGetState.error) {\n      return <Loading />;\n    }\n\n    const {\n      currentLocation,\n      currentWeather,\n      temperatureUnit,\n      isFavorite,\n      forecasts,\n      autocomplete,\n      autocompleteState,\n    } = this.props;\n\n    return (\n      <div className=\"container landing-page\">\n        <SearchLocation\n          onSearch={this.handlerSearchLocation}\n          onSelected={this.handlerSelectedLocation}\n          data={autocomplete}\n          isLoading={autocompleteState.inProgress}\n        />\n\n        <div className=\"weather-container\">\n          <div className=\"weather-location\">\n            <div className=\"current-location\">\n              <div className=\"location-name\">\n                {currentLocation.LocalizedName}\n              </div>\n              <div className=\"location-country\">\n                {currentLocation.Country.LocalizedName}\n              </div>\n            </div>\n            <div className=\"location-favorite\" onClick={this.handlerFavorite}>\n              {isFavorite ? (\n                <Icon type=\"heart\" theme=\"filled\" />\n              ) : (\n                <Icon type=\"heart\" />\n              )}\n            </div>\n          </div>\n\n          <div className=\"weather-info\">\n            <div className=\"weather-icon\">\n              <img\n                src={getWeatherIcon(currentWeather.WeatherIcon)}\n                alt={currentWeather.WeatherText}\n              />\n            </div>\n            <div className=\"weather-temparature\">\n              {`${currentWeather.Temperature[temperatureUnit].Value} °${currentWeather.Temperature[temperatureUnit].Unit}`}\n            </div>\n            <div className=\"weather-text\">{currentWeather.WeatherText}</div>\n            <div>{forecasts.Headline.Text}</div>\n          </div>\n          <Forecasts\n            dailyForecasts={forecasts.DailyForecasts}\n            temperatureUnit={temperatureUnit}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nLandingPage.propTypes = {\n  currentLocation: PropTypes.object.isRequired,\n  currentWeather: PropTypes.object.isRequired,\n  weatherGetState: PropTypes.object.isRequired,\n  getWeather: PropTypes.func.isRequired,\n  getCurrentLocationWeather: PropTypes.func.isRequired,\n  temperatureUnit: PropTypes.string.isRequired,\n\n  forecasts: PropTypes.object.isRequired,\n  forecastsGetState: PropTypes.object.isRequired,\n  getForecastsWeather: PropTypes.func.isRequired,\n\n  removeFromFavorite: PropTypes.func.isRequired,\n  addToFavorite: PropTypes.func.isRequired,\n  isFavorite: PropTypes.bool.isRequired,\n\n  autocomplete: PropTypes.array.isRequired,\n  autocompleteState: PropTypes.object.isRequired,\n  searchLocation: PropTypes.func.isRequired,\n  cleanupSearchLocation: PropTypes.func.isRequired,\n\n  match: PropTypes.object.isRequired,\n};\n\nexport default LandingPage;\n","const GET_CURRENT_LOCATION_WEATHER = 'app/weather/GET_CURRENT_LOCATION_WEATHER';\nconst GET_WEATHER = 'app/weather/GET_WEATHER';\nconst GET_WEATHER_REQUESTED = 'app/weather/GET_WEATHER_REQUESTED';\nconst GET_WEATHER_SUCCEEDED = 'app/weather/GET_WEATHER_SUCCEEDED';\nconst GET_WEATHER_FAILED = 'app/weather/GET_WEATHER_FAILED';\n\nconst GET_FORECASTS = 'app/weather/GET_FORECASTS';\nconst GET_FORECASTS_REQUESTED = 'app/weather/GET_FORECASTS_REQUESTED';\nconst GET_FORECASTS_SUCCEEDED = 'app/weather/GET_FORECASTS_SUCCEEDED';\nconst GET_FORECASTS_FAILED = 'app/weather/GET_FORECASTS_FAILED';\n\nconst GET_FAVORITE_WEATHER = 'app/weather/GET_FAVORITE_WEATHER';\nconst GET_FAVORITE_WEATHER_REQUESTED =\n  'app/weather/GET_FAVORITE_WEATHER_REQUESTED';\nconst GET_FAVORITE_WEATHER_SUCCEEDED =\n  'app/weather/GET_FAVORITE_WEATHER_SUCCEEDED';\nconst GET_FAVORITE_WEATHER_FAILED = 'app/weather/GET_FAVORITE_WEATHER_FAILED';\n\nexport default {\n  GET_CURRENT_LOCATION_WEATHER,\n  GET_WEATHER,\n  GET_WEATHER_REQUESTED,\n  GET_WEATHER_SUCCEEDED,\n  GET_WEATHER_FAILED,\n\n  GET_FORECASTS,\n  GET_FORECASTS_REQUESTED,\n  GET_FORECASTS_SUCCEEDED,\n  GET_FORECASTS_FAILED,\n\n  GET_FAVORITE_WEATHER,\n  GET_FAVORITE_WEATHER_REQUESTED,\n  GET_FAVORITE_WEATHER_SUCCEEDED,\n  GET_FAVORITE_WEATHER_FAILED,\n};\n","import types from '../types';\n\nexport default function(state, action) {\n  // eslint-disable-next-line default-case\n  switch (action.type) {\n    case types.GET_WEATHER_REQUESTED:\n      return {\n        ...state,\n        currentWeather: {},\n        getWeather: {\n          error: null,\n          inProgress: true,\n        },\n      };\n    case types.GET_WEATHER_SUCCEEDED:\n      return {\n        ...state,\n        currentWeather: action.weather[0],\n        currentLocation: action.location,\n        getWeather: {\n          error: null,\n          inProgress: false,\n          lastUpdate: Date.now(),\n        },\n      };\n    case types.GET_WEATHER_FAILED:\n      return {\n        ...state,\n        getWeather: {\n          error: action.error,\n          inProgress: false,\n          lastUpdate: Date.now(),\n        },\n      };\n  }\n}\n","import types from '../types';\n\nexport default function(state, action) {\n  // eslint-disable-next-line default-case\n  switch (action.type) {\n    case types.GET_FORECASTS_REQUESTED:\n      return {\n        ...state,\n        forecasts: action.isSilent ? state.forecasts : {},\n        getForecasts: {\n          error: null,\n          inProgress: true,\n        },\n      };\n    case types.GET_FORECASTS_SUCCEEDED:\n      return {\n        ...state,\n        forecasts: action.response,\n        getForecasts: {\n          error: null,\n          inProgress: false,\n          lastUpdate: Date.now(),\n        },\n      };\n    case types.GET_FORECASTS_FAILED:\n      return {\n        ...state,\n        getForecasts: {\n          error: action.error,\n          inProgress: false,\n          lastUpdate: Date.now(),\n        },\n      };\n  }\n}\n","import types from '../types';\n\nexport default function(state, action) {\n  // eslint-disable-next-line default-case\n  switch (action.type) {\n    case types.GET_FAVORITE_WEATHER_REQUESTED:\n      return {\n        ...state,\n        favorites: {\n          ...state.favorites,\n          [action.location.Key]: {},\n        },\n        getFavorites: {\n          ...state.getFavorites,\n          [action.location.Key]: {\n            error: null,\n            inProgress: true,\n          },\n        },\n      };\n    case types.GET_FAVORITE_WEATHER_SUCCEEDED:\n      return {\n        ...state,\n        favorites: {\n          ...state.favorites,\n          [action.location.Key]: action.weather[0],\n        },\n        getFavorites: {\n          ...state.getFavorites,\n          [action.location.Key]: {\n            error: null,\n            inProgress: false,\n            lastUpdate: Date.now(),\n          },\n        },\n      };\n    case types.GET_FAVORITE_WEATHER_FAILED:\n      return {\n        ...state,\n        getFavorites: {\n          ...state.getFavorites,\n          [action.location.Key]: {\n            error: action.error,\n            inProgress: false,\n            lastUpdate: Date.now(),\n          },\n        },\n      };\n  }\n}\n","import getWeather from './getWeather';\nimport forecasts from './forecasts';\nimport favorites from './favorites';\n\nconst initialState = {\n  currentLocation: {},\n  currentWeather: {},\n  forecasts: {},\n  favorites: {},\n  getWeather: {\n    error: null,\n    inProgress: false,\n    lastUpdate: null,\n  },\n  getForecasts: {\n    error: null,\n    inProgress: false,\n    lastUpdate: null,\n  },\n  getFavorites: {}, // error object\n};\n\nexport default function(state = initialState, action) {\n  return (\n    getWeather(state, action) ||\n    favorites(state, action) ||\n    forecasts(state, action) ||\n    state\n  );\n}\n","import types from './types';\n\nconst getCurrentLocationWeather = () => ({\n  type: types.GET_CURRENT_LOCATION_WEATHER,\n});\n// Get location weather\nconst getLocationWeather = location => ({\n  type: types.GET_WEATHER,\n  location,\n});\n\nconst getLocationWeatherRequest = location => ({\n  type: types.GET_WEATHER_REQUESTED,\n  location,\n});\n\nconst getLocationWeatherSuccess = (weather, location) => ({\n  type: types.GET_WEATHER_SUCCEEDED,\n  weather,\n  location,\n});\n\nconst getLocationWeatherFailure = error => ({\n  type: types.GET_WEATHER_FAILED,\n  error,\n});\n\n// Get Forecasts\nconst getForecastsWeather = (keyId, isMetric, isSilent) => ({\n  type: types.GET_FORECASTS,\n  keyId,\n  isMetric,\n  isSilent,\n});\n\nconst getForecastsWeatherRequest = (keyId, isMetric, isSilent) => ({\n  type: types.GET_FORECASTS_REQUESTED,\n  keyId,\n  isMetric,\n  isSilent,\n});\n\nconst getForecastsWeatherSuccess = response => ({\n  type: types.GET_FORECASTS_SUCCEEDED,\n  response,\n});\n\nconst getForecastsWeatherFailure = error => ({\n  type: types.GET_FORECASTS_FAILED,\n  error,\n});\n\n// Get Favorite weather\nconst getFavoriteWeather = location => ({\n  type: types.GET_FAVORITE_WEATHER,\n  location,\n});\n\nconst getFavoriteWeatherRequest = location => ({\n  type: types.GET_FAVORITE_WEATHER_REQUESTED,\n  location,\n});\n\nconst getFavoriteWeatherSuccess = (weather, location) => ({\n  type: types.GET_FAVORITE_WEATHER_SUCCEEDED,\n  weather,\n  location,\n});\nconst getFavoriteWeatherFailure = (error, location) => ({\n  type: types.GET_FAVORITE_WEATHER_FAILED,\n  error,\n  location,\n});\n\nexport default {\n  getCurrentLocationWeather,\n  getLocationWeather,\n  getLocationWeatherRequest,\n  getLocationWeatherSuccess,\n  getLocationWeatherFailure,\n\n  getForecastsWeather,\n  getForecastsWeatherRequest,\n  getForecastsWeatherSuccess,\n  getForecastsWeatherFailure,\n\n  getFavoriteWeather,\n  getFavoriteWeatherRequest,\n  getFavoriteWeatherSuccess,\n  getFavoriteWeatherFailure,\n};\n","export default class NetworkError extends Error {\n  constructor(response, body) {\n    const { status, statusText, url } = response || {};\n    super(statusText);\n\n    try {\n      Error.captureStackTrace(this, NetworkError);\n    } catch (error) {\n      // noop\n    }\n\n    this.status = status;\n    this.statusText = statusText;\n    this.url = url;\n    this.body = body;\n  }\n}\n","import NetworkError from './NetworkError';\nimport { IS_DEV } from './constants';\n\nfunction get(endpoint) {\n  if (IS_DEV) {\n    return new Promise(resolve => {\n      if (window.localStorage.getItem(endpoint)) {\n        setTimeout(() => {\n          return resolve(JSON.parse(window.localStorage.getItem(endpoint)));\n        }, 0);\n      } else {\n        return resolve(\n          fetch(endpoint, { cache: 'force-cache' })\n            .then(res => {\n              if (!res.ok) {\n                return res.json().then(body => {\n                  throw new NetworkError(res, body);\n                });\n              }\n              return res.json();\n            })\n            .then(json => {\n              window.localStorage.setItem(endpoint, JSON.stringify(json));\n              return json;\n            }),\n        );\n      }\n    });\n  } else {\n    return fetch(endpoint).then(res => {\n      if (!res.ok) {\n        return res.json().then(body => {\n          throw new NetworkError(res, body);\n        });\n      }\n      return res.json();\n    });\n  }\n}\n\nexport const api = {\n  get,\n};\n","import { api } from '../utils/httpFetch';\nimport { WEATHER_API_KEY, WEATHER_URL } from '../utils/constants';\n\nconst LOCATION_URL = `${WEATHER_URL}/locations/v1/cities`;\nconst LOCATION_AUTOCOMPLITED_URL = `${LOCATION_URL}/autocomplete`;\nconst LOCATION_GEOPOSITION_SEARCH_URL = `${LOCATION_URL}/geoposition/search`;\nconst CURRENT_CONDITIONS_URL = `${WEATHER_URL}/currentconditions/v1`;\nconst FORECASTS_URL = `${WEATHER_URL}/forecasts/v1/daily/5day`;\n\nexport function getLocationAutocomplete(search) {\n  return api.get(\n    `${LOCATION_AUTOCOMPLITED_URL}?apikey=${WEATHER_API_KEY}&q=${search}`,\n  );\n}\n\nexport function getLocationByGeoposition({ lat, lon }) {\n  return api.get(\n    `${LOCATION_GEOPOSITION_SEARCH_URL}?apikey=${WEATHER_API_KEY}&q=${lat},${lon}`,\n  );\n}\n\nexport function getCurrentConditions(locationKey) {\n  return api.get(\n    `${CURRENT_CONDITIONS_URL}/${locationKey}?apikey=${WEATHER_API_KEY}`,\n  );\n}\n\nexport function getForecasts5Days(locationKey, isMetric = true) {\n  return api.get(\n    `${FORECASTS_URL}/${locationKey}?apikey=${WEATHER_API_KEY}&metric=${isMetric}`,\n  );\n}\n","import * as apis from '../apis/weather';\n\nexport function getBrowserLocation() {\n  return new Promise((resolve, reject) => {\n    if ('geolocation' in window.navigator) {\n      navigator.geolocation.getCurrentPosition(\n        position => {\n          const { coords } = position;\n          return resolve({\n            lat: Math.round(coords.latitude * 1000) / 1000,\n            lon: Math.round(coords.longitude * 1000) / 1000,\n          });\n        },\n        () => {\n          return reject('Unable to get position');\n        },\n      );\n    }\n  });\n}\n\nfunction getDefaultLocation() {\n  const defaultCity = 'Tel Aviv';\n  return apis.getLocationAutocomplete(defaultCity).then(response => {\n    const item = response.find(info => info.LocalizedName === defaultCity);\n    if (!item) {\n      throw new Error('Unable to get city id.');\n    }\n    return item;\n  });\n}\n\nexport function getCurrentLocationKey() {\n  return getBrowserLocation()\n    .then(position => {\n      return apis.getLocationByGeoposition(position);\n    })\n    .catch(() => {\n      return getDefaultLocation();\n    });\n}\n","import { call, put, takeEvery } from 'redux-saga/effects';\n\nimport weatherActions from './actions';\nimport weatherTypes from './types';\nimport * as weatherAPI from '../../apis/weather';\nimport { getCurrentLocationKey } from '../../utils/location';\n\nconst getLocationWeatherSaga = function* getLocationWeather({ location }) {\n  yield put(weatherActions.getLocationWeatherRequest(location));\n  try {\n    const weather = yield call(weatherAPI.getCurrentConditions, location.Key);\n    yield put(weatherActions.getLocationWeatherSuccess(weather, location));\n  } catch (error) {\n    yield put(weatherActions.getLocationWeatherFailure(error));\n  }\n};\n\nconst getCurrentLocationWeatherSaga = function* getCurrentLocationWeather() {\n  try {\n    const location = yield call(getCurrentLocationKey);\n    yield getLocationWeatherSaga({ location });\n  } catch (error) {\n    yield put(weatherActions.getLocationWeatherFailure(error));\n  }\n};\n\nconst watchCurrentWeather = function* watchCurrentWeather() {\n  yield takeEvery(\n    weatherTypes.GET_CURRENT_LOCATION_WEATHER,\n    getCurrentLocationWeatherSaga,\n  );\n};\n\nconst watchLocationWeather = function* watchLocationWeather() {\n  yield takeEvery(weatherTypes.GET_WEATHER, getLocationWeatherSaga);\n};\n\nconst getCurrentForecastsWeatherSaga = function* getCurrentForecastsWeather({\n  keyId,\n  isMetric,\n  isSilent,\n}) {\n  yield put(\n    weatherActions.getForecastsWeatherRequest(keyId, isMetric, isSilent),\n  );\n  try {\n    const response = yield call(weatherAPI.getForecasts5Days, keyId, isMetric);\n    yield put(weatherActions.getForecastsWeatherSuccess(response));\n  } catch (error) {\n    yield put(weatherActions.getForecastsWeatherFailure(error));\n  }\n};\n\nconst watchCurrentForecastsWeather = function* watchCurrentForecastsWeather() {\n  yield takeEvery(weatherTypes.GET_FORECASTS, getCurrentForecastsWeatherSaga);\n};\n\nconst getFavoriteLocationWeatherSaga = function* getFavoriteLocationWeather({\n  location,\n}) {\n  yield put(weatherActions.getFavoriteWeatherRequest(location));\n  try {\n    const weather = yield call(weatherAPI.getCurrentConditions, location.Key);\n    yield put(weatherActions.getFavoriteWeatherSuccess(weather, location));\n  } catch (error) {\n    yield put(weatherActions.getFavoriteWeatherFailure(error, location));\n  }\n};\n\nconst watchFavoriteLocationWeather = function* watchFavoriteLocationWeather() {\n  yield takeEvery(\n    weatherTypes.GET_FAVORITE_WEATHER,\n    getFavoriteLocationWeatherSaga,\n  );\n};\n\nexport default [\n  watchCurrentWeather,\n  watchLocationWeather,\n  watchCurrentForecastsWeather,\n  watchFavoriteLocationWeather,\n];\n","import reducer from './reducers';\n\nexport { default as weatherActions } from './actions';\nexport { default as weatherSagas } from './sagas';\n\nexport default reducer;\n","const GET_SEARCH_LOCATION = 'app/location/GET_SEARCH_LOCATION';\nconst GET_SEARCH_LOCATION_REQUESTED =\n  'app/location/GET_SEARCH_LOCATION_REQUESTED';\nconst GET_SEARCH_LOCATION_SUCCEEDED =\n  'app/location/GET_SEARCH_LOCATION_SUCCEEDED';\nconst GET_SEARCH_LOCATION_FAILED = 'app/location/GET_SEARCH_LOCATION_FAILED';\nconst CLEANUP_SEARCH_LOCATION = 'app/location/CLEANUP_SEARCH_LOCATION';\n\nexport default {\n  GET_SEARCH_LOCATION,\n  GET_SEARCH_LOCATION_REQUESTED,\n  GET_SEARCH_LOCATION_SUCCEEDED,\n  GET_SEARCH_LOCATION_FAILED,\n  CLEANUP_SEARCH_LOCATION,\n};\n","import types from '../types';\n\nexport default function(state, action) {\n  // eslint-disable-next-line default-case\n  switch (action.type) {\n    case types.GET_SEARCH_LOCATION_REQUESTED:\n      return {\n        ...state,\n        getSearchLocation: {\n          error: null,\n          inProgress: true,\n        },\n      };\n    case types.GET_SEARCH_LOCATION_SUCCEEDED:\n      return {\n        ...state,\n        serachLocation: action.response,\n        getSearchLocation: {\n          error: null,\n          inProgress: false,\n          lastUpdate: Date.now(),\n        },\n      };\n    case types.GET_SEARCH_LOCATION_FAILED:\n      return {\n        ...state,\n        getSearchLocation: {\n          error: action.error,\n          inProgress: false,\n          lastUpdate: Date.now(),\n        },\n      };\n\n    case types.CLEANUP_SEARCH_LOCATION:\n      return {\n        ...state,\n        serachLocation: [],\n        getSearchLocation: {\n          error: null,\n          inProgress: true,\n        },\n      };\n  }\n}\n","import searchLocation from './searchLocation';\n\nconst initialState = {\n  serachLocation: [],\n  getSearchLocation: {\n    error: null,\n    inProgress: false,\n    lastUpdate: null,\n  },\n};\n\nexport default function(state = initialState, action) {\n  return searchLocation(state, action) || state;\n}\n","import types from './types';\n\n// Get location weather\nconst getSearchLocation = text => ({\n  type: types.GET_SEARCH_LOCATION,\n  text,\n});\n\nconst getSearchLocationRequest = text => ({\n  type: types.GET_SEARCH_LOCATION_REQUESTED,\n  text,\n});\n\nconst getSearchLocationSuccess = response => ({\n  type: types.GET_SEARCH_LOCATION_SUCCEEDED,\n  response,\n});\n\nconst getSearchLocationFailure = error => ({\n  type: types.GET_SEARCH_LOCATION_FAILED,\n  error,\n});\n\nconst cleanupSearchLocation = () => ({\n  type: types.CLEANUP_SEARCH_LOCATION,\n});\n\nexport default {\n  getSearchLocation,\n  getSearchLocationRequest,\n  getSearchLocationSuccess,\n  getSearchLocationFailure,\n  cleanupSearchLocation,\n};\n","import { call, put, takeEvery } from 'redux-saga/effects';\n\nimport weatherActions from './actions';\nimport weatherTypes from './types';\nimport * as weatherAPI from '../../apis/weather';\n\nconst getSearchLocationSaga = function* getSearchLocation({ text }) {\n  yield put(weatherActions.getSearchLocationRequest(text));\n  try {\n    const response = yield call(weatherAPI.getLocationAutocomplete, text);\n    yield put(weatherActions.getSearchLocationSuccess(response));\n  } catch (error) {\n    yield put(weatherActions.getSearchLocationFailure(error));\n  }\n};\n\nconst watchSearchLocation = function* watchSearchLocation() {\n  yield takeEvery(weatherTypes.GET_SEARCH_LOCATION, getSearchLocationSaga);\n};\n\nexport default [watchSearchLocation];\n","import reducer from './reducers';\n\nexport { default as locationActions } from './actions';\nexport { default as locationSagas } from './sagas';\n\nexport default reducer;\n","import { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\n\nimport Landing from './Landing';\nimport { weatherActions } from '../../store/weather';\nimport { locationActions } from '../../store/location';\nimport { settingsActions } from '../../store/settings';\nimport { isFavorite } from '../../utils/selector';\n\nconst mapStateToProps = state => {\n  return {\n    currentLocation: state.weather.currentLocation,\n    currentWeather: state.weather.currentWeather,\n    weatherGetState: state.weather.getWeather,\n    temperatureUnit: state.settings.temperatureUnit,\n\n    forecasts: state.weather.forecasts,\n    forecastsGetState: state.weather.getForecasts,\n\n    isFavorite: isFavorite(\n      state.weather.currentLocation,\n      state.settings.favorites,\n    ),\n\n    autocomplete: state.location.serachLocation,\n    autocompleteState: state.location.getSearchLocation,\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  getWeather: location => dispatch(weatherActions.getLocationWeather(location)),\n  getCurrentLocationWeather: () =>\n    dispatch(weatherActions.getCurrentLocationWeather()),\n  getForecastsWeather: (keyId, isMetric, isSilent = false) =>\n    dispatch(weatherActions.getForecastsWeather(keyId, isMetric, isSilent)),\n\n  addToFavorite: data => dispatch(settingsActions.addToFavotite(data)),\n  removeFromFavorite: keyId =>\n    dispatch(settingsActions.removeFromFavotite(keyId)),\n\n  searchLocation: search => dispatch(locationActions.getSearchLocation(search)),\n  cleanupSearchLocation: () =>\n    dispatch(locationActions.cleanupSearchLocation()),\n});\n\nconst LandingConnected = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Landing);\n\nexport default withRouter(LandingConnected);\n","export function isFavorite(location, favorites) {\n  if (favorites.length && location.Key) {\n    return (\n      favorites.find(favorite => favorite.Key === location.Key) !== undefined\n    );\n  }\n  return false;\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon } from 'antd';\n\nimport Loading from '../Loading';\nimport { getWeatherIcon } from '../../utils/weather';\n\nclass Favorite extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    const { location, getWeather } = this.props;\n    getWeather(location);\n  }\n\n  isLoading = () => {\n    const { weather, weatherState } = this.props;\n\n    if (!weather && !weatherState) {\n      return true;\n    }\n    if (!weatherState.hasOwnProperty('inProgress')) {\n      return true;\n    }\n    return weatherState.inProgress;\n  };\n\n  render() {\n    const {\n      location,\n      weather,\n      weatherState,\n      onRemove,\n      temperatureUnit,\n      onSelect,\n    } = this.props;\n\n    return (\n      <div className=\"favorite\" onClick={onSelect}>\n        <div className=\"__location\">\n          <div className=\"__location-name\">{location.LocalizedName}</div>\n          <div className=\"__location-country\">\n            {location.Country.LocalizedName}\n          </div>\n          <div\n            className=\"__favorite-remove\"\n            onClick={() => {\n              onRemove();\n            }}\n          >\n            <Icon type=\"delete\" theme=\"filled\" />\n          </div>\n        </div>\n        <div className=\"__weather-info\">\n          {this.isLoading() ? (\n            <Loading />\n          ) : weatherState.error ? (\n            <div className=\"__weather-error\">\n              <Icon type=\"close-circle\" />\n              <div className=\"__weather-error-text\">Failed to get data.</div>\n            </div>\n          ) : (\n            <div>\n              <div className=\"__weather-icon\">\n                <img\n                  src={getWeatherIcon(weather.WeatherIcon)}\n                  alt={weather.WeatherText}\n                />\n              </div>\n              <div className=\"__weather-temparature\">\n                {`${weather.Temperature[temperatureUnit].Value} °${weather.Temperature[temperatureUnit].Unit}`}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nFavorite.propTypes = {\n  location: PropTypes.object.isRequired,\n\n  weather: PropTypes.object,\n  weatherState: PropTypes.object,\n  getWeather: PropTypes.func.isRequired,\n\n  temperatureUnit: PropTypes.string.isRequired,\n\n  onRemove: PropTypes.func.isRequired,\n  onSelect: PropTypes.func.isRequired,\n};\n\nexport default Favorite;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Favorite from './Favorite';\nimport * as routers from '../../utils/routers';\n\nimport './style.scss';\n\nfunction FavoritePage(props) {\n  const {\n    favorites,\n    getFavoriteWeather,\n    favoritesWeather,\n    favoritesWeatherState,\n    temperatureUnit,\n    removeFromFavorite,\n    history,\n  } = props;\n\n  return (\n    <div className=\"container\">\n      <div className=\"favorites\">\n        {favorites.map(favorite => {\n          return (\n            <div key={favorite.Key} className=\"favorite-container\">\n              <Favorite\n                location={favorite}\n                weather={favoritesWeather[favorite.Key]}\n                weatherState={favoritesWeatherState[favorite.Key]}\n                getWeather={getFavoriteWeather}\n                temperatureUnit={temperatureUnit}\n                onRemove={() => removeFromFavorite(favorite.Key)}\n                onSelect={() => {\n                  history.push({\n                    pathname: `${routers.LOCATION}/${favorite.Key}`,\n                    state: { location: favorite },\n                  });\n                }}\n              />\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nFavoritePage.propTypes = {\n  favorites: PropTypes.array.isRequired,\n\n  favoritesWeather: PropTypes.object.isRequired,\n  favoritesWeatherState: PropTypes.object.isRequired,\n  getFavoriteWeather: PropTypes.func.isRequired,\n\n  temperatureUnit: PropTypes.string.isRequired,\n\n  removeFromFavorite: PropTypes.func.isRequired,\n};\nexport default FavoritePage;\n","import { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\n\nimport FavoritesComponent from './Favorites';\nimport { weatherActions } from '../../store/weather';\nimport { settingsActions } from '../../store/settings';\n\nconst mapStateToProps = state => {\n  return {\n    favorites: state.settings.favorites,\n\n    favoritesWeather: state.weather.favorites,\n    favoritesWeatherState: state.weather.getFavorites,\n\n    temperatureUnit: state.settings.temperatureUnit,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getFavoriteWeather: location =>\n      dispatch(weatherActions.getFavoriteWeather(location)),\n\n    removeFromFavorite: keyId =>\n      dispatch(settingsActions.removeFromFavotite(keyId)),\n  };\n};\n\nconst ConnectedFavoritesComponent = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(FavoritesComponent);\n\nexport default withRouter(ConnectedFavoritesComponent);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport classnames from 'classnames';\nimport { Layout } from 'antd';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom';\n\nimport Header from '../Header';\nimport LandingPage from '../Landing';\nimport FavoritesPage from '../Favorites';\nimport * as routers from '../../utils/routers';\nimport { ThemeStyle } from '../../utils/constants';\n\nimport './style.scss';\n\nclass App extends Component {\n  componentDidMount() {\n    this.handlerOfStyle();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.style !== prevProps.style) {\n      this.handlerOfStyle();\n    }\n  }\n\n  handlerOfStyle = () => {\n    if (this.props.style === ThemeStyle.dark) {\n      document.body.classList.add('dark');\n    } else {\n      document.body.classList.remove('dark');\n    }\n  };\n\n  render() {\n    const { style } = this.props;\n    return (\n      <Router>\n        <Layout\n          className={classnames('app', { dark: style === ThemeStyle.dark })}\n        >\n          <Layout.Header>\n            <Header />\n          </Layout.Header>\n          <Layout.Content className=\"app__content\">\n            <Switch>\n              <Route exact path={routers.LANDING} component={LandingPage} />\n              <Route\n                exact\n                path={`${routers.LOCATION}/:locationId`}\n                component={LandingPage}\n              />\n              <Route exact path={routers.FAVORITES} component={FavoritesPage} />\n              <Route render={() => <Redirect to={routers.LANDING} />} />\n            </Switch>\n          </Layout.Content>\n        </Layout>\n      </Router>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    style: state.settings.themeStyle,\n  };\n};\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import weatherSagas from './weather/sagas';\nimport locationSagas from './location/sagas';\n\nexport default [...weatherSagas, ...locationSagas];\n","import { combineReducers } from 'redux';\n\n// Add your reducers below, and don't forget to add them in the combineReducers objects too!\nimport weatherReducers from './weather';\nimport settingsReducers from './settings';\nimport locationReducers from './location';\n\nexport default combineReducers({\n  weather: weatherReducers,\n  settings: settingsReducers,\n  location: locationReducers,\n});\n","/**\n * This object is the initial state of the store.\n */\n\nexport default {};\n","import {\n  applyMiddleware,\n  compose,\n  createStore as createReduxStore,\n} from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport sagas from './sagas';\nimport rootReducer from './reducers';\n\nimport defaultInitialState from './initialState';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst createStore = (initialState = defaultInitialState) => {\n  // Middlewares list\n  const middleware = [sagaMiddleware];\n\n  // Store enhancers\n  const enhancers = [];\n  let composeEnhancers = compose;\n\n  if (process.env.NODE_ENV === 'development') {\n    if (typeof window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ === 'function') {\n      composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\n    }\n  }\n\n  // Store creation\n  const store = createReduxStore(\n    rootReducer,\n    initialState,\n    composeEnhancers(applyMiddleware(...middleware), ...enhancers),\n  );\n\n  sagas.forEach(sagaMiddleware.run);\n\n  return store;\n};\n\nconst store = createStore();\n\nexport default store;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport ReactDOM from 'react-dom';\nimport dotenv from 'dotenv';\nimport App from './views/App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store/store';\n\nimport 'antd/dist/antd.css';\nimport './styles/index.scss';\n\ndotenv.config();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}